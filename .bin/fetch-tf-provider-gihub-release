#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# see: https://developer.hashicorp.com/terraform/cli/config/config-file#provider-installation
# Packed layout: HOSTNAME/NAMESPACE/TYPE/terraform-provider-TYPE_VERSION_TARGET.zip is the distribution zip file obtained from the provider's origin registry.
# Unpacked layout: HOSTNAME/NAMESPACE/TYPE/VERSION/TARGET is a directory containing the result of extracting the provider's distribution zip file.

HOSTNAME=""
NAMESPACE=""
TYPE=""
REPOSITORY=""
VERSION="latest"
PROVIDER_ROOT_DIR="./providers"

OS=`uname -s | tr "[:upper:]" "[:lower:]"`
ARCH=`uname -m|tr "[:upper:]" "[:lower:]"`

USAGE="
Fetch terraform provider from github release assets.
Environment variable GH_TOKEN must be exported or specified.

$(basename "$0") [-h] [-v <version>]
Options:
    -h               Show this help
    -V               Show version
    -H <hostname>    Specify hostname of terraform provider
    -N <namespace>   Specify namespace of terraform provider
    -T <type>        Specify type of terraform provider
    -R <repository>  Specify repository of terraform provider ex. <owner/repo>
    -v <version>     Specify provider version release tag ex. v1.0.0 (default: latest)
    -o <os>          Specify machine OS of terraform provider (default: uname -s)
    -a <arch>        Specify machine architecture of terraform provider (default: uname -m)
    -d <directory>   Specify output provider directory (default: ./providers)
    -t <token>       Specify token for github (default: env:GH_TOKEN)
"

while getopts ':hVH:N:T:R:v:o:a:d:t:' option; do
  case "$option" in
    h) echo "$USAGE"
       exit
       ;;
    V) echo "$(basename "$0")(version: 0.1.0)"
       exit
       ;;
    H) HOSTNAME=$OPTARG
       ;;
    N) NAMESPACE=$OPTARG
       ;;
    T) TYPE=$OPTARG
       ;;
    R) REPOSITORY=$OPTARG
       ;;
    v) VERSION=$OPTARG
       ;;
    o) OS=$OPTARG
       ;;
    a) ARCH=$OPTARG
       ;;
    d) PROVIDER_ROOT_DIR=$OPTARG
       ;;
    t) GH_TOKEN=$OPTARG
       ;;
    :) printf "missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1
       ;;
   \?) printf "illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1
       ;;
  esac
done
shift $((OPTIND - 1))

if [ -z "${HOSTNAME-}" ] || [[ $HOSTNAME = *[[:space:]]* ]] ; then
    echo "Missting argument -H <hostname>." >&2
    echo "$USAGE" >&2
    exit 1
fi
if [ -z "${NAMESPACE-}" ] || [[ $NAMESPACE = *[[:space:]]* ]] ; then
    echo "Missting argument -N <namespace>." >&2
    echo "$USAGE" >&2
    exit 1
fi
if [ -z "${TYPE-}" ] || [[ $TYPE = *[[:space:]]* ]] ; then
    echo "Missting argument -T <type>." >&2
    echo "$USAGE" >&2
    exit 1
fi
if [ -z "${REPOSITORY-}" ] || [[ $REPOSITORY = *[[:space:]]* ]] ; then
    echo "Missting argument -R <repository>." >&2
    echo "$USAGE" >&2
    exit 1
fi
if [ -z "${GH_TOKEN-}" ] || [[ $GH_TOKEN = *[[:space:]]* ]] ; then
    echo "github token is undefined. Please export GH_TOKEN environment variable or specify argument -t <token>" >&2
    echo "$USAGE" >&2
    exit 1
fi
if [ $VERSION != 'latest' ];then
    VERSION="tags/$VERSION"
fi

echo "Downloading provider...(OS: $OS, ARCH=$ARCH)"
mkdir -p $PROVIDER_ROOT_DIR/$HOSTNAME/$NAMESPACE/$TYPE
cd $PROVIDER_ROOT_DIR/$HOSTNAME/$NAMESPACE/$TYPE

ASSET_JSON=`curl -fsSL https://$GH_TOKEN@api.github.com/repos/$REPOSITORY/releases/$VERSION | jq -r ".assets[] | select(.name | contains(\"$OS\") and contains(\"$ARCH\"))"`
ASSET_NAME=`echo $ASSET_JSON | jq -r .name`
ASSET_ID=`echo $ASSET_JSON | jq -r .id`
if [ -z "${ASSET_ID}" ]; then
    echo "No provider asset found. exit." >&2
    exit 1
fi
curl -fsSL -H 'Accept: application/octet-stream' -o $ASSET_NAME https://$GH_TOKEN@api.github.com/repos/$REPOSITORY/releases/assets/$ASSET_ID

echo "Completed. (provider: $ASSET_NAME)"
