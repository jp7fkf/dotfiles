#!/usr/bin/env bash

# Copyright (c) 2025 Yudai Hashimoto (jp7fkf)
# Licensed under MIT.

set -o errexit
set -o nounset
set -o pipefail

# see: https://developer.hashicorp.com/terraform/cli/config/config-file#provider-installation
# Packed layout: HOSTNAME/NAMESPACE/TYPE/terraform-provider-TYPE_VERSION_TARGET.zip is the distribution zip file obtained from the provider's origin registry.
# Unpacked layout: HOSTNAME/NAMESPACE/TYPE/VERSION/TARGET is a directory containing the result of extracting the provider's distribution zip file.

HOSTNAME=""
NAMESPACE=""
TYPE=""
REPOSITORY=""
VERSION="latest"
PROVIDER_ROOT_DIR="./providers"

OS=`uname -s | tr "[:upper:]" "[:lower:]"`
ARCH=`uname -m | tr "[:upper:]" "[:lower:]"`
# special mapping for a lot of x86_64 users
if [ "$ARCH" == "x86_64" ]; then
    ARCH="amd64"
fi
if [ `type -P go` ]; then
    OS=`go env GOOS`
    ARCH=`go env GOARCH`
fi

USAGE="Fetch terraform provider from github release assets.
Environment variable GH_TOKEN/GITUB_TOKEN must be exported or specified for private repository.

USAGE:
    $(basename "$0") [OPTIONS]
OPTIONS:
    -h               Show this help
    -V               Show version
    -u               Output provider as unpacked layout
    -H <hostname>    Specify hostname of terraform provider
    -N <namespace>   Specify namespace of terraform provider
    -T <type>        Specify type of terraform provider
    -R <repository>  Specify repository of terraform provider ex. <owner/repo>
    -v <version>     Specify provider version release tag ex. v1.0.0 (default: latest)
    -o <os>          Specify machine OS of terraform provider (default: uname -s)
    -a <arch>        Specify machine architecture of terraform provider
                     (default: env:GOARCH > 'uname -m' based auto detection)
    -d <directory>   Specify output provider directory (default: ./providers)
    -t <token>       Specify token for github (default: env:GH_TOKEN, env:GITHUB_TOKEN)
"

while getopts ':hVuH:N:T:R:v:o:a:d:t:' option; do
  case "$option" in
    h) echo "$USAGE"
       exit
       ;;
    V) echo "$(basename "$0")(version: 0.1.0)"
       exit
       ;;
    u) UNPACKED=1
       ;;
    H) HOSTNAME=$OPTARG
       ;;
    N) NAMESPACE=$OPTARG
       ;;
    T) TYPE=$OPTARG
       ;;
    R) REPOSITORY=$OPTARG
       ;;
    v) VERSION=$OPTARG
       ;;
    o) OS=$OPTARG
       ;;
    a) ARCH=$OPTARG
       ;;
    d) PROVIDER_ROOT_DIR=$OPTARG
       ;;
    t) GH_TOKEN=$OPTARG
       ;;
    :) printf "\033[1m[ERROR]: Missing argument for -%s\033[m\n\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1
       ;;
   \?) printf "\033[1m[ERROR]: Illegal option: -%s\033[m\n\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1
       ;;
  esac
done
shift $((OPTIND - 1))

if [ -z "${HOSTNAME-}" ] || [[ $HOSTNAME = *[[:space:]]* ]]; then
    printf "\033[1m[ERROR]: Missting argument -H <hostname>.\033[m\n\n" >&2
    echo "$USAGE" >&2
    exit 1
fi
if [ -z "${NAMESPACE-}" ] || [[ $NAMESPACE = *[[:space:]]* ]]; then
    printf "\033[1m[ERROR]: Missting argument -N <namespace>.\033[m\n\n" >&2
    echo "$USAGE" >&2
    exit 1
fi
if [ -z "${TYPE-}" ] || [[ $TYPE = *[[:space:]]* ]]; then
    printf "\033[1m[ERROR]: Missting argument -T <type>.\033[m\n\n" >&2
    echo "$USAGE" >&2
    exit 1
fi
if [ -z "${REPOSITORY-}" ] || [[ $REPOSITORY = *[[:space:]]* ]]; then
    printf "\033[1m[ERROR]: Missting argument -R <repository>.\033[m\n\n" >&2
    echo "$USAGE" >&2
    exit 1
fi
if [ -z "${GH_TOKEN:=${GITHUB_TOKEN:-}}" ] || [[ $GH_TOKEN = *[[:space:]]* ]]; then
    printf "\033[1m[WARN]: github token is undefined. Please export GH_TOKEN/GITUB_TOKEN environment variable or specify argument -t <token> for private repository.\033[m\n\n" >&2
    GH_TOKEN=""
else
    GH_TOKEN=${GH_TOKEN}"@"
fi
if [ ${VERSION} != 'latest' ]; then
    VERSION="tags/${VERSION}"
fi

(
    # TODO: we want to get fail body on stdout in fail and substitute normal response to variable.
    RELEASE_JSON=`curl -sSL --fail-with-body https://${GH_TOKEN}api.github.com/repos/${REPOSITORY}/releases/${VERSION}`
    ASSET_JSON=`echo $RELEASE_JSON | jq -r ".assets[] | select(.name | contains(\"${OS}\") and contains(\"${ARCH}\"))"`
    ASSET_NAME=`echo $ASSET_JSON | jq -r .name`
    ASSET_ID=`echo $ASSET_JSON | jq -r .id`
    VERSION=`echo $RELEASE_JSON | jq -r .tag_name | sed 's/^v//'`

    if [ -z "${ASSET_ID}" ]; then
        echo -e "\nNo provider asset found. exit." >&2
        exit 1
    fi

    mkdir -p ${PROVIDER_ROOT_DIR}/${HOSTNAME}/${NAMESPACE}/${TYPE}
    curl -fsSL -H 'Accept: application/octet-stream' -o ${PROVIDER_ROOT_DIR}/${HOSTNAME}/${NAMESPACE}/${TYPE}/${ASSET_NAME} https://${GH_TOKEN}api.github.com/repos/${REPOSITORY}/releases/assets/${ASSET_ID}
    if [ ${UNPACKED:=0} -eq 1 ]; then
        mkdir -p ${PROVIDER_ROOT_DIR}/${HOSTNAME}/${NAMESPACE}/${TYPE}/${VERSION}/${OS}_${ARCH}
        unzip -o -q ${PROVIDER_ROOT_DIR}/${HOSTNAME}/${NAMESPACE}/${TYPE}/${ASSET_NAME} -d ${PROVIDER_ROOT_DIR}/${HOSTNAME}/${NAMESPACE}/${TYPE}/${VERSION}/${OS}_${ARCH}
        rm ${PROVIDER_ROOT_DIR}/${HOSTNAME}/${NAMESPACE}/${TYPE}/${ASSET_NAME}
        echo -e "\nOutput asset to ${PROVIDER_ROOT_DIR}/${HOSTNAME}/${NAMESPACE}/${TYPE}/${VERSION}/${OS}_${ARCH}/"
    else
        echo -e "\nOutput asset to ${PROVIDER_ROOT_DIR}/${HOSTNAME}/${NAMESPACE}/${TYPE}/${ASSET_NAME}"
    fi
) &

PID=$!
POS=0
PROGRESS=("⠇" "⠋" "⠉" "⠙" "⠸" "⠴" "⠤" "⠦")
while true; do
    echo -ne "\rDownloading provider...(OS: ${OS}, ARCH=${ARCH}) ${PROGRESS[$((POS % 8))]} "
    sleep 0.1
    POS=$((POS+1))
    if [ ! -n "$(jobs -r)" ]; then
        wait $PID
        RET=$?
        if [ ! ${RET} ]; then
            exit $RET
        else
            break
        fi
    fi
done
echo "Completed."
