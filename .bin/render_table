#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (c) 2024 Yudai Hashimoto (jp7fkf)
# Licensed under MIT.


# Args
# headers: must be 1-dimentional string array
# data   : must be 2-dimentional string array
# align  : must be in ['<', '>', '^']

def render_table(data, headers=[], column_width_limit=50, column_separator=" ", align='<', boarder='=', none_header_filler='', none_data_filler='', boarder_padding=False):
    _rendered = []
    _max_column_widths = []

    # padding
    _column_len = max([len(_d) for _d in data + [headers]])
    headers += [None] * (_column_len - len(headers))
    for _d in data:
        _d += [None] * (_column_len - len(_d))

    # define max width of each column
    for _d in [list(_column) for _column in zip(*data + [headers])]:
        _column_width = max([len(_i) if _i is not None else max([len(none_header_filler), len(none_data_filler)]) for _i in _d])
        if _column_width > column_width_limit:
            _max_column_widths.append(column_width_limit)
        else:
            _max_column_widths.append(_column_width)

    # rendering
    if any(headers):
        _rendered.append(column_separator.join([f"{headers[_index][:_max_column_widths[_index]]:{align}{_max_column_widths[_index]}}" if headers[_index] is not None else f"{none_header_filler[:_max_column_widths[_index]]:{align}{_max_column_widths[_index]}}" for _index in range(len(_max_column_widths))]))
        if boarder is not None:
            _rendered.append(column_separator.join([f"{(boarder*len(headers[_index]))[:_max_column_widths[_index]]:{boarder if boarder_padding else " "}{align}{_max_column_widths[_index]}}" if headers[_index] is not None else (boarder if boarder_padding else " ") * _max_column_widths[_index] for _index in range(len(_max_column_widths))]))
    for _d in data:
        _rendered.append(column_separator.join([f"{_d[_index][:_max_column_widths[_index]]:{align}{_max_column_widths[_index]}}" if _d[_index] is not None else f"{none_data_filler[:_max_column_widths[_index]]:{align}{_max_column_widths[_index]}}" for _index in range(len(_d))]))

    return "\n".join(_rendered)


if __name__ == "__main__":
    _headers = ["Title", "Description", "Remarks"]
    _data = [
        ["Hoge", "Huga", "Hogehoge"],
        ["HogeHoge", "HugaHuga", "HogehogeHogehoge"],
        ["123456789012345", "1234567890", "12345"],
    ]
    print(render_table(_data, _headers))
    print()

    _headers = ["Title", "Description", "Remarks"]
    _data = [
        ["Hoge", "Huga"],
        ["HogeHoge", "HugaHuga", "HogehogeHogehoge"],
        ["123456789012345", "1234567890", "12345", "1234"],
        ["123456789012345", "1234567890", "12345", "1234", "123"],
    ]
    print(render_table(_data, _headers, column_width_limit=8, column_separator=" | ", align='^', boarder='-', none_data_filler='-', boarder_padding=True))
    print()

    _kuku_size = 10
    _kuku = [[str(i * j) for i in range(1, _kuku_size)] for j in range(1, _kuku_size)]
    print(render_table(_kuku, align='>'))
    print()

    # k8s/kubectl like outputs
    _headers = ["NAME", "READY", "STATUS", "RESTARTS", "AGE"]
    _data = [
        ["webapp-5f858ff5f8-hjrw9", "1/1", "Running", "0", "21d"],
        ["webapp-5f858ff5f8-jshmq", "1/1", "Running", "0", "21d"],
        ["webapp-5f858ff5f8-lnn4b", "1/1", "Running", "0", "21d"],
    ]
    print(render_table(_data, _headers, column_separator="   ", boarder=None))
    print()

    _headers = ["Type", "Reason", "Age ", "From", "Message"]
    _data = [
        ["Normal", "Sync", "9m59s (x2657 over 18d)", "loadbalancer-controller", "Scheduled for sync"],
        ["Normal", "Scheduled", "2m54s", "default-scheduler", "Successfully assigned jp7fkf-lab/webapp-28790340-tbthk to gke-webapp"],
        ["Normal", "Pulled", "2m53s", "kubelet", "Container image \"gcr.io/google.com/cloudsdktool/cloud-sdk:319.0.0-alpine\" already present on machine"],
        ["Normal", "Created", "2m53s", "kubelet", "Created container webapp"],
        ["Normal", "Started", "2m53s", "kubelet", "Started container webapp"],
    ]
    print(render_table(_data, _headers, column_width_limit=100, column_separator="  ", boarder="-"))
    print()


## Output Examples ##
# % ./render_table.py
# Title           Description Remarks
# =====           =========== =======
# Hoge            Huga        Hogehoge
# HogeHoge        HugaHuga    HogehogeHogehoge
# 123456789012345 1234567890  12345
#
#  Title   | Descript | Remarks  |      |
# -------- | -------- | -------- | ---- | ---
#   Hoge   |   Huga   |    -     |  -   |  -
# HogeHoge | HugaHuga | Hogehoge |  -   |  -
# 12345678 | 12345678 |  12345   | 1234 |  -
# 12345678 | 12345678 |  12345   | 1234 | 123
#
# 1  2  3  4  5  6  7  8  9
# 2  4  6  8 10 12 14 16 18
# 3  6  9 12 15 18 21 24 27
# 4  8 12 16 20 24 28 32 36
# 5 10 15 20 25 30 35 40 45
# 6 12 18 24 30 36 42 48 54
# 7 14 21 28 35 42 49 56 63
# 8 16 24 32 40 48 56 64 72
# 9 18 27 36 45 54 63 72 81
#
# NAME                      READY   STATUS    RESTARTS   AGE
# webapp-5f858ff5f8-hjrw9   1/1     Running   0          21d
# webapp-5f858ff5f8-jshmq   1/1     Running   0          21d
# webapp-5f858ff5f8-lnn4b   1/1     Running   0          21d
#
# Type    Reason     Age                     From                     Message
# ----    ------     ----                    ----                     -------
# Normal  Sync       9m59s (x2657 over 18d)  loadbalancer-controller  Scheduled for sync
# Normal  Scheduled  2m54s                   default-scheduler        Successfully assigned jp7fkf-lab/webapp-28790340-tbthk to gke-webapp
# Normal  Pulled     2m53s                   kubelet                  Container image "gcr.io/google.com/cloudsdktool/cloud-sdk:319.0.0-alpine" already present on machine
# Normal  Created    2m53s                   kubelet                  Created container webapp
# Normal  Started    2m53s                   kubelet                  Started container webapp
#
