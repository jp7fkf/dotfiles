#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (c) 2024 Yudai Hashimoto (jp7fkf)
# Licensed under MIT.

import copy
import sys
import argparse
import csv

VERSION = "1.0.0"

# Args
# headers        : must be 1-dimentional string array
# data           : must be 2/3-dimentional string array
# default_align  : must be in ['<', '>', '^']
# align_array    : must be 1-dimentional string array in ['<', '>', '^']


def render_table(data, headers=None, border='=', column_separator=' ', column_width_limit=50, none_header_filler='', none_data_filler='', default_align='<', align_array=None, border_padding=False, border_penetrate=False):
    # init default
    data = copy.deepcopy(data)
    headers = [] if headers is None else copy.copy(headers)
    align_array = [] if align_array is None else copy.copy(align_array)
    _rendered = []
    _max_column_widths = []

    if type(data[0][0]) is str:
        data = [data]

    # padding
    _column_len = max([len(_d) for _d in sum(data, []) + [headers]])
    headers += ([none_header_filler] if none_header_filler and any(headers) else [None]) * (_column_len - len(headers))
    align_array += default_align * (_column_len - len(align_array))
    for _d in sum(data, []):
        _d += [None] * (_column_len - len(_d))

    # define max width of each column
    for _d in [list(_column) for _column in zip(*sum(data, []) + [headers])]:
        _column_width = max([len(_i) if _i is not None else len(none_header_filler) if _i == 0 and any(headers) else len(none_data_filler) for _i in _d])
        if _column_width > column_width_limit:
            _max_column_widths.append(column_width_limit)
        else:
            _max_column_widths.append(_column_width)

    # rendering
    if any(headers):
        _rendered.append(column_separator.join([f"{headers[_index][:_max_column_widths[_index]]:{align_array[_index]}{_max_column_widths[_index]}}" if headers[_index] is not None else f"{none_header_filler[:_max_column_widths[_index]]:{align_array[_index]}{_max_column_widths[_index]}}" for _index in range(len(_max_column_widths))]))
    for _section in data:
        if any(headers) and border is not None:
            if border_penetrate is True:
                _border_len = sum(_max_column_widths) + len(column_separator) * (len(_max_column_widths) - 1)
                _rendered.append((border * _border_len)[:_border_len])
            else:
                _rendered.append(column_separator.join([f"{(border*len(headers[_index]))[:_max_column_widths[_index]]:{border if border_padding else ' '}{align_array[_index]}{_max_column_widths[_index]}}" if headers[_index] is not None else (border if border_padding else ' ') * _max_column_widths[_index] for _index in range(len(_max_column_widths))]))
        for _d in _section:
            _rendered.append(column_separator.join([f"{_d[_index][:_max_column_widths[_index]]:{align_array[_index]}{_max_column_widths[_index]}}" if _d[_index] is not None else f"{none_data_filler[:_max_column_widths[_index]]:{align_array[_index]}{_max_column_widths[_index]}}" for _index in range(len(_d))]))

    return "\n".join(_rendered)


def main():
    parser = argparse.ArgumentParser(description=f'render_table. (v{VERSION})')
    parser.add_argument('-f', '--file', help='CSV-formatted data file path', default="data.csv")
    parser.add_argument('--header', help='use first row as a header', default=False, action='store_true')
    parser.add_argument('-l', '--column-width-limit', help='column width limit', type=int, default=50)
    parser.add_argument('-s', '--column-separator', help='culumn separator char', default=' ')
    parser.add_argument('-a', '--default-align', help='default alignment specifier', default='<', choices=['<', '^', '>'])
    parser.add_argument('-A', '--align-array', help='alignment specifier array for each column', nargs='*', default=[], choices=['<', '^', '>'])
    parser.add_argument('-b', '--border', help='border chars', default='=')
    parser.add_argument('--none-header-filler', help='filler chars for None in headers', default='')
    parser.add_argument('--none-data-filler', help='filler chars for None in data', default='')
    parser.add_argument('-p', '--border-padding', help='whole of border width will be padding with border chars except separator', default=False, action='store_true')
    parser.add_argument('-P', '--border-penetrate', help='whole of border width will be penetrate padding with border chars', default=False, action='store_true')
    args = parser.parse_args()

    with open(args.file, 'r') as _file:
        _data = list(csv.reader(_file))

    print(render_table(data=_data[1:] if args.header else _data,
                       headers=_data[0] if args.header else [],
                       column_width_limit=args.column_width_limit,
                       column_separator=args.column_separator,
                       default_align=args.default_align,
                       align_array=args.align_array,
                       border=args.border,
                       none_header_filler=args.none_header_filler,
                       none_data_filler=args.none_data_filler,
                       border_padding=args.border_padding,
                       border_penetrate=args.border_penetrate))
    return 0


def exmaple():
    _headers = ["Title", "Description", "Remarks"]
    _data = [
        ["Hoge", "Huga", "Hogehoge"],
        ["HogeHoge", "HugaHuga", "HogehogeHogehoge"],
        ["123456789012345", "1234567890", "12345"],
    ]
    print(render_table(_data, _headers, border_penetrate=True))
    print()

    _headers = ["Title", "Description", "Remarks"]
    _data = [
        ["Hoge", "Huga"],
        ["HogeHoge", "HugaHuga", "HogehogeHogehoge"],
        ["123456789012345", "1234567890", "12345", "1234"],
        ["123456789012345", "1234567890", "12345", "1234", "123"],
    ]
    print(render_table(_data, _headers, border='-', column_separator=" | ", column_width_limit=8, none_data_filler='-', default_align='^', align_array=['<', '^', '>'], border_padding=True))
    print()

    _kuku_size = 10
    _kuku = [[str(i * j) for i in range(1, _kuku_size)] for j in range(1, _kuku_size)]
    print(render_table(_kuku, default_align='>'))
    print()

    # k8s/kubectl like outputs
    _headers = ["NAME", "READY", "STATUS", "RESTARTS", "AGE"]
    _data = [
        ["webapp-5f858ff5f8-hjrw9", "1/1", "Running", "0", "21d"],
        ["webapp-5f858ff5f8-jshmq", "1/1", "Running", "0", "21d"],
        ["webapp-5f858ff5f8-lnn4b", "1/1", "Running", "0", "21d"],
    ]
    print(render_table(_data, _headers, border=None, column_separator="   "))
    print()

    _headers = ["Type", "Reason", "Age ", "From", "Message"]
    _data = [
        ["Normal", "Sync", "9m59s (x2657 over 18d)", "loadbalancer-controller", "Scheduled for sync"],
        ["Normal", "Scheduled", "2m54s", "default-scheduler", "Successfully assigned jp7fkf-lab/webapp-28790340-tbthk to gke-webapp"],
        ["Normal", "Pulled", "2m53s", "kubelet", "Container image \"gcr.io/google.com/cloudsdktool/cloud-sdk:319.0.0-alpine\" already present on machine"],
        ["Normal", "Created", "2m53s", "kubelet", "Created container webapp"],
        ["Normal", "Started", "2m53s", "kubelet", "Started container webapp"],
    ]
    print(render_table(_data, _headers, border="-", column_separator="  ", column_width_limit=100))
    print()

    _headers = ["Type", "Reason", "Age ", "From", "Message"]
    _data = [
        [
            ["Normal", "Sync", "9m59s (x2657 over 18d)", "loadbalancer-controller", "Scheduled for sync"],
            ["Normal", "Scheduled", "2m54s", "default-scheduler", "Successfully assigned jp7fkf-lab/webapp-28790340-tbthk to gke-webapp"],
            ["Normal", "Pulled", "2m53s", "kubelet", "Container image \"gcr.io/google.com/cloudsdktool/cloud-sdk:319.0.0-alpine\" already present on machine"],
            ["Normal", "Created", "2m53s", "kubelet", "Created container webapp"],
            ["Normal", "Started", "2m53s", "kubelet", "Started container webapp"],
        ],[
            ["Normal", "Sync", "9m59s (x2657 over 18d)", "loadbalancer-controller", "Scheduled for sync"],
            ["Normal", "Scheduled", "2m54s", "default-scheduler", "Successfully assigned jp7fkf-lab/webapp-28790340-tbthk to gke-webapp"],
            ["Normal", "Pulled", "2m53s", "kubelet", "Container image \"gcr.io/google.com/cloudsdktool/cloud-sdk:319.0.0-alpine\" already present on machine"],
            ["Normal", "Created", "2m53s", "kubelet", "Created container webapp"],
            ["Normal", "Started", "2m53s", "kubelet", "Started container webapp"],
        ]
    ]
    print(render_table(_data, _headers, border="-", column_separator="  ", column_width_limit=100, border_padding=True))
    print()

## Output Examples ##
# % ./render_table.py
# Title           Description Remarks
# ============================================
# Hoge            Huga        Hogehoge
# HogeHoge        HugaHuga    HogehogeHogehoge
# 123456789012345 1234567890  12345
#
# Title    | Descript |  Remarks |      |
# -------- | -------- | -------- | ---- | ---
# Hoge     |   Huga   |        - |  -   |  -
# HogeHoge | HugaHuga | Hogehoge |  -   |  -
# 12345678 | 12345678 |    12345 | 1234 |  -
# 12345678 | 12345678 |    12345 | 1234 | 123
#
# 1  2  3  4  5  6  7  8  9
# 2  4  6  8 10 12 14 16 18
# 3  6  9 12 15 18 21 24 27
# 4  8 12 16 20 24 28 32 36
# 5 10 15 20 25 30 35 40 45
# 6 12 18 24 30 36 42 48 54
# 7 14 21 28 35 42 49 56 63
# 8 16 24 32 40 48 56 64 72
# 9 18 27 36 45 54 63 72 81
#
# NAME                      READY   STATUS    RESTARTS   AGE
# webapp-5f858ff5f8-hjrw9   1/1     Running   0          21d
# webapp-5f858ff5f8-jshmq   1/1     Running   0          21d
# webapp-5f858ff5f8-lnn4b   1/1     Running   0          21d
#
# Type    Reason     Age                     From                     Message
# ----    ------     ----                    ----                     -------
# Normal  Sync       9m59s (x2657 over 18d)  loadbalancer-controller  Scheduled for sync
# Normal  Scheduled  2m54s                   default-scheduler        Successfully assigned jp7fkf-lab/webapp-28790340-tbthk to gke-webapp
# Normal  Pulled     2m53s                   kubelet                  Container image "gcr.io/google.com/cloudsdktool/cloud-sdk:319.0.0-alpine" already present on machine
# Normal  Created    2m53s                   kubelet                  Created container webapp
# Normal  Started    2m53s                   kubelet                  Started container webapp
#


if __name__ == "__main__":
    sys.exit(main())
